<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/task
           http://www.springframework.org/schema/task/spring-task-3.0.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!--
        *********************
		   ANNOTATIONS SCAN
		*********************

		@repository   must be included in this file
     -->
    <context:component-scan base-package="dk.ratio.magic.repository"/>

    <!--
		************************
		      DAO SERVICES
		************************

		The data access object beans are used largely throughout the
		entire application.
	-->
    <bean id="cardDao" class="dk.ratio.magic.repository.card.JdbcCardDao"/>
    <bean id="deckDao" class="dk.ratio.magic.repository.deck.JdbcDeckDao"/>
    <bean id="userDao" class="dk.ratio.magic.repository.user.JdbcUserDao"/>

    <!--
		************************
		        UTILITIES
		************************

		@cardCrawler     used for updating cards and prices
		@userSession     utility object for handling user sessions, logins etc.
		@secureRandom    for added security the random object is created once
    <bean id="configBean" class="dk.ratio.magic.services.config.ConfigBean" />
	-->
    <bean id="cardCrawler" class="dk.ratio.magic.services.card.crawler.Crawler"/>
    <bean id="userSession" class="dk.ratio.magic.services.user.UserManager"/>
    <bean id="secureRandom" class="java.security.SecureRandom"/>

    <!--
		************************
		      TASKS
		************************

		@annotation-driven    enables the use of annotations for task scheduling
		@taskExecutor         configuration for task executor
	-->
    <task:annotation-driven/>

    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="5"/>
        <property name="maxPoolSize" value="10"/>
        <property name="queueCapacity" value="25"/>
    </bean>

    <!--
		************************
		   EXCEPTION MAPPING
		************************

		@warnLogCategory    makes sure exceptions thrown get logged
	-->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="warnLogCategory" value="WARN"/>
        <property name="exceptionMappings">
            <map>
                <entry key="CannotGetJdbcConnectionException" value="/error/db"/>
            </map>
        </property>
        <property name="defaultErrorView" value="/error/default"/>
    </bean>

    <!--
		************************
		        DATABASE
		************************
	-->

    <!--
		The data source that is used when connecting to the database.

		Using the same DAO in several classes (controllers) can lead to a
		com.mysql.jdbc.exceptions.jdbc4.CommunicationsException because the
		server has been idle for a long time.

		To alleviate this behavior we do a testOnBorrow (the DAO is 'borrowed')
		and give the configuration a validation query to test with. One could
		also try toying around with timeouts and such, but I feel this is (so far)
		the most optimal solution.

		@dataSource          the data source used by the templates defined below
		@propertyConfigurer  configuration location for the data source
	-->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="validationQuery" value="SELECT 1"/>
        <property name="testOnBorrow" value="true"/>
    </bean>

    <!-- Tell the configuration reader to look for properties in these locations -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="locations">
            <list>
                <value>/WEB-INF/jdbc.properties</value>
            </list>
        </property>
    </bean>


    <!--
		************************
		     JDBC TEMPLATES
		************************

		@simpleJdbcTemplate          simple template, uses the dataSource defined above
		@namedParameterJdbcTemplate  a bit more advanced template

		Using these templates can alleviate the user of having to access data
		through tedious subclassing.
	-->
    <bean id="simpleJdbcTemplate" class="org.springframework.jdbc.core.simple.SimpleJdbcTemplate">
        <constructor-arg ref="dataSource"/>
    </bean>

    <bean id="namedParameterJdbcTemplate"
          class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
        <constructor-arg ref="dataSource"/>
    </bean>

</beans>